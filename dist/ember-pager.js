// Generated by CoffeeScript 1.6.3
(function() {
  var ControllerMixin, Pager, RouteMixin, ScrollPaginator, ScrollPaginatorMixin, handlePageBounds, module;

  RouteMixin = Em.Mixin.create({
    actions: {
      loadMore: function() {
        return this.controller.get('content').loadMore();
      }
    }
  });

  ControllerMixin = Em.Mixin.create({
    currentPageBinding: Em.Binding.oneWay('content.startPage'),
    init: function() {
      var changed, currentPageChanged, debounce,
        _this = this;
      this.set('pager', Pager.create({
        controller: this,
        contentBinding: 'controller.content'
      }));
      this._super();
      debounce = null;
      changed = false;
      currentPageChanged = function() {
        return _this.get('content').loadPage(_this.get('currentPage'));
      };
      return this.addObserver('currentPage', function() {
        var page;
        page = _this.get('currentPage');
        if ((page !== _this.get('content.startPage')) && (page > 0)) {
          if (debounce) {
            return changed = true;
          } else {
            currentPageChanged();
            return debounce = Em.run.later(function() {
              if (changed) {
                currentPageChanged();
              }
              return debounce = null;
            }, 500);
          }
        }
      });
    }
  });

  ScrollPaginator = Em.Object.extend({
    view: null,
    $scrollEl: Em.$(window),
    $el: null,
    scrollBuffer: 1000,
    $paddingEl: null,
    checkInterval: 1000,
    horizontal: false,
    init: function() {
      this.checkInterval = 0;
      this.$el = this.get('view').$();
      if (!this.$paddingEl) {
        this.$paddingEl = Em.$('<div class="scroll-paginator-padding" />');
        this.$el.prepend(this.$paddingEl);
      }
      if (this.$el) {
        return this.attach();
      }
    },
    attach: function() {
      this.attached = true;
      return this.listen();
    },
    detach: function() {
      return this.attached = false;
    },
    debounceInterval: 500,
    listen: function(e) {
      var run, schedule, setInterval, waiting,
        _this = this;
      if (this.listening) {
        return;
      } else {
        this.listening = true;
      }
      waiting = false;
      run = function() {
        if (_this.attached && _this.shouldLoadMore()) {
          return _this.loadMore();
        }
      };
      schedule = function() {
        var runOnNext;
        if (!waiting) {
          run();
          return waiting = Em.run.later(function() {
            var runOnNext;
            if (runOnNext) {
              run();
            }
            return waiting = runOnNext = null;
          }, _this.debounceInterval);
        } else {
          return runOnNext = true;
        }
      };
      this.$scrollEl.on('scroll', schedule);
      if (this.checkInterval) {
        setInterval = function() {
          return Em.run.later(function() {
            schedule();
            if (_this.checkInterval) {
              return setInterval();
            }
          }, _this.checkInterval);
        };
        return setInterval();
      }
    },
    shouldLoadMore: function() {
      var scrollThreshold;
      if (this.content.get('isFinished')) {
        return;
      }
      if (!this.horizontal) {
        scrollThreshold = this.$el.offset().top + this.$el.height() - this.scrollBuffer;
        return this.$scrollEl.scrollTop() + this.$scrollEl.height() > scrollThreshold;
      } else {
        scrollThreshold = this.$el.offset().left + this.$el.width() - this.scrollBuffer;
        return this.$scrollEl.scrollLeft() + this.$scrollEl.width() > scrollThreshold;
      }
    },
    loadMore: function() {
      return this.content.loadMore();
    }
  });

  ScrollPaginatorMixin = Em.Mixin.create({
    didInsertElement: function() {
      this._super();
      return this.scrollHelper = ScrollPaginator.create({
        content: this.get('controller.content'),
        view: this
      });
    },
    willDestroyElement: function() {
      this._super();
      return this.scrollHelper.detach();
    }
  });

  handlePageBounds = function(property) {
    return (function() {
      var lastPage, page;
      page = this.get("content." + property);
      lastPage = this.get('lastPage');
      if (page > lastPage) {
        page = lastPage;
      }
      if (page < 1) {
        page = 1;
      }
      return page;
    }).property("content." + property, 'lastPage');
  };

  Pager = Em.ObjectProxy.extend({
    content: null,
    lastPage: (function() {
      return Math.ceil(this.get('total') / this.get('pageSize'));
    }).property('pageSize', 'total'),
    startPage: handlePageBounds('startPage'),
    endPage: handlePageBounds('endPage'),
    start: (function() {
      return (this.get('startPage') - 1) * this.get('pageSize') + 1;
    }).property('startPage', 'pageSize'),
    end: (function() {
      var end, total;
      total = this.get('total');
      end = this.get('endPage') * this.get('pageSize');
      if (total !== void 0 && end > total) {
        end = total;
      }
      return end;
    }).property('endPage', 'pageSize')
  });

  module = {
    RouteMixin: RouteMixin,
    ControllerMixin: ControllerMixin,
    ScrollPaginator: ScrollPaginator,
    ScrollPaginatorMixin: ScrollPaginatorMixin
  };

  Ember.Pager = module;

}).call(this);
